"use client";

import { ConnectButton } from "@rainbow-me/rainbowkit";
import type { NextPage } from "next";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import { useEffect, useState } from "react";
import { NeynarAuthButton, useNeynarContext } from "@neynar/react";
import axios, { AxiosError } from "axios";
import Image from "next/image";

interface ErrorRes {
  message: string;
}

interface Cast {
  object: string;
  hash: string;
  author: any;
  text: string;
  timestamp: string;
  reactions: any;
  replies: any;
}

interface Metrics {
  totalCasts: number;
  totalLikes: number;
  totalReplies: number;
  totalCharacters: number;
  avgLikesPerCast: number;
  engagementRate: number;
  consistencyScore: number;
}

interface ScoreData {
  score: number;
  metrics: Metrics;
  rating: string;
  feedback: string[];
}

interface ScoreResponse {
  casts: Cast[];
  score: ScoreData;
}

const Home: NextPage = () => {
  const { user } = useNeynarContext();
  const [text, setText] = useState("");
  const [userCasts, setUserCasts] = useState<Cast[]>([]);
  const [scoreData, setScoreData] = useState<ScoreData | null>(null);
  const [loading, setLoading] = useState(false);

  const handlePublishCast = async () => {
    try {
      setLoading(true);
      await axios.post<{ message: string }>("/api/cast", {
        signerUuid: user?.signer_uuid,
        text,
      });
      alert("Cast Published!");

      setText("");
      fetchScore(); // Refresh casts after publishing
    } catch (err) {
      const { message } = (err as AxiosError).response?.data as ErrorRes;
      alert(message);
    } finally {
      setLoading(false);
    }
  };

  const fetchScore = async () => {
    if (user) {
      try {
        setLoading(true);
        const response = await axios.post<{
          message: string;
          data: ScoreResponse;
        }>("/api/getScore", {
          fid: user?.fid,
        });

        if (response.data.data) {
          const { casts, score } = response.data.data;
          setUserCasts(casts || []);
          setScoreData(score || null);
        }
      } catch (error) {
        console.error("Error fetching casts:", error);
      } finally {
        setLoading(false);
      }
    }
  };

  useEffect(() => {
    fetchScore();
  }, [user]);

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  // Render a meter for the score visualization
  const renderScoreMeter = (score: number) => {
    // Define color based on score
    const getScoreColor = () => {
      if (score >= 80) return "#4ade80"; // Green
      if (score >= 60) return "#facc15"; // Yellow
      if (score >= 40) return "#fb923c"; // Orange
      return "#f87171"; // Red
    };

    return (
      <div className="w-full mt-4">
        <div className="flex justify-between mb-1">
          <span className="text-base font-medium">Your Farcaster Score</span>
          <span className="text-sm font-semibold">{score}/100</span>
        </div>
        <div className="w-full bg-gray-200 rounded-full h-2.5">
          <div
            className="h-2.5 rounded-full"
            style={{
              width: `${score}%`,
              backgroundColor: getScoreColor(),
            }}
          ></div>
        </div>
      </div>
    );
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>RainbowKit App with Farcaster</title>
        <meta
          content="Generated by @rainbow-me/create-rainbowkit"
          name="description"
        />
        <link href="/favicon.ico" rel="icon" />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <div style={{ marginTop: "2rem", width: "100%", maxWidth: "800px" }}>
          <NeynarAuthButton />

          {loading && (
            <div className="text-center py-4">
              <p>Loading...</p>
            </div>
          )}

          {user && (
            <div
              className="flex flex-col gap-4 w-full max-w-md p-4 rounded-md shadow-md"
              style={{ marginTop: "1rem" }}
            >
              <div className="flex items-center gap-4">
                {user.pfp_url && (
                  <img
                    src={user.pfp_url}
                    width={40}
                    height={40}
                    alt="User Profile Picture"
                    className="rounded-full"
                  />
                )}
                <p className="text-lg font-semibold">{user?.display_name}</p>
              </div>

              {scoreData && (
                <div className="bg-white p-4 rounded-lg shadow-sm">
                  {renderScoreMeter(scoreData.score)}

                  <div className="mt-4">
                    <h3 className="font-semibold text-lg">
                      Rating:{" "}
                      <span className="text-blue-600">{scoreData.rating}</span>
                    </h3>

                    <div className="mt-2">
                      <h4 className="font-medium">Feedback:</h4>
                      <ul className="list-disc pl-5 mt-1 text-sm text-gray-700">
                        {scoreData.feedback.map((item, index) => (
                          <li key={index}>{item}</li>
                        ))}
                      </ul>
                    </div>

                    <div className="mt-4 grid grid-cols-2 gap-3 text-sm">
                      <div className="bg-gray-50 p-2 rounded">
                        <span className="font-medium">Total Casts:</span>{" "}
                        {scoreData.metrics.totalCasts}
                      </div>
                      <div className="bg-gray-50 p-2 rounded">
                        <span className="font-medium">Total Likes:</span>{" "}
                        {scoreData.metrics.totalLikes}
                      </div>
                      <div className="bg-gray-50 p-2 rounded">
                        <span className="font-medium">Avg. Likes/Cast:</span>{" "}
                        {scoreData.metrics.avgLikesPerCast.toFixed(1)}
                      </div>
                      <div className="bg-gray-50 p-2 rounded">
                        <span className="font-medium">Engagement Rate:</span>{" "}
                        {scoreData.metrics.engagementRate.toFixed(2)}
                      </div>
                    </div>
                  </div>
                </div>
              )}

              <textarea
                value={text}
                onChange={(e) => setText(e.target.value)}
                placeholder="Say Something"
                rows={5}
                className="w-full p-2 rounded-md shadow-md text-black placeholder:text-gray-900"
                style={{
                  width: "100%",
                  padding: "0.5rem",
                  borderRadius: "0.375rem",
                  boxShadow: "0 1px 3px 0 rgba(0, 0, 0, 0.1)",
                }}
              />
              <button
                onClick={handlePublishCast}
                disabled={loading}
                className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md shadow-md hover:bg-blue-600 transition-colors duration-200 ease-in-out disabled:bg-blue-300"
                style={{
                  marginTop: "1rem",
                  padding: "0.5rem 1rem",
                  backgroundColor: loading ? "#93c5fd" : "#3b82f6",
                  color: "white",
                  borderRadius: "0.375rem",
                  boxShadow: "0 1px 3px 0 rgba(0, 0, 0, 0.1)",
                }}
              >
                {loading ? "Posting..." : "Cast"}
              </button>
            </div>
          )}

          {userCasts.length > 0 && (
            <div className="mt-8 w-full max-w-2xl">
              <h2 className="text-xl font-bold mb-4">Your Recent Casts</h2>
              <div className="space-y-4">
                {userCasts.map((cast) => (
                  <div
                    key={cast.hash}
                    className="p-4 border rounded-lg shadow-sm"
                  >
                    <div className="flex items-center gap-2 mb-2">
                      {cast.author && cast.author.pfp_url && (
                        <img
                          src={cast.author.pfp_url}
                          width={32}
                          height={32}
                          alt="Author"
                          className="rounded-full"
                        />
                      )}
                      <span className="font-medium">
                        {cast.author?.display_name || "User"}
                      </span>
                      <span className="text-gray-500 text-sm ml-auto">
                        {formatDate(cast.timestamp)}
                      </span>
                    </div>
                    <p className="text-gray-800">{cast.text}</p>
                    <div className="flex mt-2 text-sm text-gray-500">
                      <span className="mr-4">
                        ‚ù§Ô∏è {cast.reactions?.likes_count || 0}
                      </span>
                      <span>üí¨ {cast.replies?.count || 0}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      </main>

      <footer className={styles.footer}>
        <a href="https://rainbow.me" rel="noopener noreferrer" target="_blank">
          Made with ‚ù§Ô∏è by your frens at üåà
        </a>
      </footer>
    </div>
  );
};

export default Home;
